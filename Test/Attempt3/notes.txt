Table of Contents:
- Line 13: Old Stuff from Game/TestingAround.php
- Line 25: TestingAround Archives
- Line 39: Original Version of Game.php
- Line 100: Working Code b4 JSON (from TestingAround.php?)
- Line 291: Skon's JSON Code from Office Hours 4/14
- Line 486: Connor's Quiz Questions
- Line 600: fillQuestions() from Game.php



  
Old Stuff from Game/TestingAround.php:
This is incomplete, doesn't really do anything
$sql = "SELECT * FROM QuestionDatabase Where QuestionNumber = 1";
  $result = mysqli_query($conn, $sql);
  while ($row = mysqli_fetch_all($result,MYSQLI_ASSOC)){
        

}




TestingAround Archives:
It seems that the <?php ?> wasn't being properly commented out in the JS, 
when we took this out functionality improved.
    // var phpQuestion = <?php echo promptRequest(1); ?>
  
  // var phpCorrect = <?php echo correctRequest(1); ?>
  // var phpWrong1 = <?php echo wrong1Request(1); ?>
  // var phpWrong2 = <?php echo wrong2Request(1); ?>
  // var phpWrong3 = <?php echo wrong3Request(1); ?>





Original Version of Game.php:

<?php
  $conn = mysqli_connect("localhost","fishell1","S219352","Game2");

  if (mysqli_connect_errno()) {
      echo "Failed to connect to MySQL: " . mysqli_connect_error();
      exit();
  }
?>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    
    <title>BigGamerGuy 
    </title>
</head>
<h1>Playing Game</h1>
<body>
    
<?php
    $sql = "SELECT * FROM QuestionDatabase WHERE QuestionNumber = 3";
    if ($result = mysqli_query($conn, $sql)) {
        while ($row = mysqli_fetch_row($result)) {
          $prompt = $row[1];
          $corr = $row[2];
          $wr1 = $row[3];
          $wr2 = $row[4];
          $wr3 = $row[5];
          echo $prompt , ' is prompt\n';
          echo -e $corr , 'is corr\n';
          echo -e $wr1 , 'is wr1';
          //printf ("%s (%s) (%s)\n", $row[0], $row[1], $row[3]);
        }
        mysqli_free_result($result);
      }
      
      mysqli_close($con);
   ?>


    
</body>
<script>

</script>

</html>










Working Code b4 JSON (from TestingAround.php?)


<?php

function connect() {
$conn = mysqli_connect("localhost","fishell1","S219352","Game2");

if (mysqli_connect_errno()) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    exit();
}
return $conn;
}

//Prompt and answer request functions

  function promptRequest($rowNumber){
    

//connection

  $prompt = "";
    $conn = connect();
    $sql = "SELECT * FROM QuestionDatabase WHERE QuestionNumber = '$rowNumber'";
    if ($result = mysqli_query($conn, $sql)) {
     
        while ($row = mysqli_fetch_row($result)) {

	      $prompt = $row[1];
          
        }
        mysqli_free_result($result);
      
    mysqli_close($conn);

      return $prompt;
      }
}

// function correctRequest($row){
//   $conn = mysqli_connect("localhost","fishell1","S219352","Game2");

// if (mysqli_connect_errno()) {
//     echo "Failed to connect to MySQL: " . mysqli_connect_error();
//     exit();
// }
// //Connection


//   $sql = "SELECT CorrectResponse FROM QuestionDatabase WHERE QuestionNumber = " . $row;
//   if ($result = mysqli_query($conn, $sql)) {
//       while ($row = mysqli_fetch_row($result)) {
//         $correctResponse = $row[0];
//       }
//       mysqli_free_result($result);
//     }
//     mysqli_close($con);
//     return $correctResponse;
// }

// function wrong1Request($row){
//   $conn = mysqli_connect("localhost","fishell1","S219352","Game2");

// if (mysqli_connect_errno()) {
//     echo "Failed to connect to MySQL: " . mysqli_connect_error();
//     exit();
// }
// //Connection

  
//   $sql = "SELECT WrongResponse1 FROM QuestionDatabase WHERE QuestionNumber = " . $row;
//   if ($result = mysqli_query($conn, $sql)) {
//       while ($row = mysqli_fetch_row($result)) {
//         $wrongResponse1 = $row[0];
//       }
//       mysqli_free_result($result);
//     }
    
//     mysqli_close($con);
//     return $wrongResponse1;
// }

// function wrong2Request($row){
//   $conn = mysqli_connect("localhost","fishell1","S219352","Game2");

// if (mysqli_connect_errno()) {
//     echo "Failed to connect to MySQL: " . mysqli_connect_error();
//     exit();
// }
// //Connection

  
//   $sql = "SELECT WrongResponse2 FROM QuestionDatabase WHERE QuestionNumber = " . $row;
//   if ($result = mysqli_query($conn, $sql)) {
//       while ($row = mysqli_fetch_row($result)) {
//         $wrongResponse2 = $row[0];
//       }
//       mysqli_free_result($result);
//     }
    
//     mysqli_close($con);
//     return $wrongResponse2;
// }

// function wrong3Request($row){
//   $conn = mysqli_connect("localhost","fishell1","S219352","Game2");

// if (mysqli_connect_errno()) {
//     echo "Failed to connect to MySQL: " . mysqli_connect_error();
//     exit();
// }
// //Connection

  
//   $sql = "SELECT WrongResponse3 FROM QuestionDatabase WHERE QuestionNumber = " . $row;
//   if ($result = mysqli_query($conn, $sql)) {
//       while ($row = mysqli_fetch_row($result)) {
//         $wrongResponse3 = $row[0];
//       }
//       mysqli_free_result($result);
//     }
  
//     mysqli_close($con);
//     return $wrongResponse3;
// }


    

function add($a,$b){
  $c=$a+$b;
  return $c;
}
function mult($a,$b){
  $c=$a*$b;
  return $c;
}

function divide($a,$b){
  $c=$a/$b;
  return $c;
}
?>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    
    <title>TEST
    </title>
</head>
<body>
    <h1>Testin Around!</h1>
    <h2>Press button to play </h2>
   
    
</body>
<script>
  var phpadd= <?php echo add(1,2);?> //call the php add function
  var phpmult= <?php echo mult(1,2);?> //call the php mult function
  var phpdivide= <?php echo divide(1,2);?> //call the php divide function
  var phpQuestion = "<?php echo promptRequest(1); ?>"
  
  



  console.log(phpadd +" = phpadd");
  console.log("\nQuestion = "+ phpQuestion);
  // console.log("\nCorrect answer = "+ phpCorrect);
  // console.log("\nWrong1 = "+ phpWrong1);
  // console.log("\nWrong2 = "+ phpWrong2);
  // console.log("\nWrong3 = "+ phpWrong3);

</script>

</html>











Skon's JSON Code from Office Hours 4/14

<?php

function connect() {
$conn = mysqli_connect("localhost","fishell1","S219352","Game2");

if (mysqli_connect_errno()) {
    echo "Failed to connect to MySQL: " . mysqli_connect_error();
    exit();
}
return $conn;
}

//Prompt and answer request functions

  function promptRequest($rowNumber){
    

//connection

  $prompt = "";
    $conn = connect();
    $sql = "SELECT * FROM QuestionDatabase WHERE QuestionNumber = '$rowNumber'";
    if ($result = mysqli_query($conn, $sql)) {
     
        $row = mysqli_fetch_row($result);

	//      $prompt = $row[1];
          
        
        mysqli_free_result($result);
     
     mysqli_close($conn);

      return json_encode($row);
      }
}

// function correctRequest($row){
//   $conn = mysqli_connect("localhost","fishell1","S219352","Game2");

// if (mysqli_connect_errno()) {
//     echo "Failed to connect to MySQL: " . mysqli_connect_error();
//     exit();
// }
// //Connection


//   $sql = "SELECT CorrectResponse FROM QuestionDatabase WHERE QuestionNumber = " . $row;
//   if ($result = mysqli_query($conn, $sql)) {
//       while ($row = mysqli_fetch_row($result)) {
//         $correctResponse = $row[0];
//       }
//       mysqli_free_result($result);
//     }
//     mysqli_close($con);
//     return $correctResponse;
// }

// function wrong1Request($row){
//   $conn = mysqli_connect("localhost","fishell1","S219352","Game2");

// if (mysqli_connect_errno()) {
//     echo "Failed to connect to MySQL: " . mysqli_connect_error();
//     exit();
// }
// //Connection

  
//   $sql = "SELECT WrongResponse1 FROM QuestionDatabase WHERE QuestionNumber = " . $row;
//   if ($result = mysqli_query($conn, $sql)) {
//       while ($row = mysqli_fetch_row($result)) {
//         $wrongResponse1 = $row[0];
//       }
//       mysqli_free_result($result);
//     }
    
//     mysqli_close($con);
//     return $wrongResponse1;
// }

// function wrong2Request($row){
//   $conn = mysqli_connect("localhost","fishell1","S219352","Game2");

// if (mysqli_connect_errno()) {
//     echo "Failed to connect to MySQL: " . mysqli_connect_error();
//     exit();
// }
// //Connection

  
//   $sql = "SELECT WrongResponse2 FROM QuestionDatabase WHERE QuestionNumber = " . $row;
//   if ($result = mysqli_query($conn, $sql)) {
//       while ($row = mysqli_fetch_row($result)) {
//         $wrongResponse2 = $row[0];
//       }
//       mysqli_free_result($result);
//     }
    
//     mysqli_close($con);
//     return $wrongResponse2;
// }

// function wrong3Request($row){
//   $conn = mysqli_connect("localhost","fishell1","S219352","Game2");

// if (mysqli_connect_errno()) {
//     echo "Failed to connect to MySQL: " . mysqli_connect_error();
//     exit();
// }
// //Connection

  
//   $sql = "SELECT WrongResponse3 FROM QuestionDatabase WHERE QuestionNumber = " . $row;
//   if ($result = mysqli_query($conn, $sql)) {
//       while ($row = mysqli_fetch_row($result)) {
//         $wrongResponse3 = $row[0];
//       }
//       mysqli_free_result($result);
//     }
  
//     mysqli_close($con);
//     return $wrongResponse3;
// }


    

function add($a,$b){
  $c=$a+$b;
  return $c;
}
function mult($a,$b){
  $c=$a*$b;
  return $c;
}

function divide($a,$b){
  $c=$a/$b;
  return $c;
}
?>


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    
    <title>TEST
    </title>
</head>
<body>
    <h1>Testin Around!</h1>
    <h2>Press button to play </h2>
   
    
</body>
<script>
  var phpadd= <?php echo add(1,2);?> //call the php add function
  var phpmult= <?php echo mult(1,2);?> //call the php mult function
  var phpdivide= <?php echo divide(1,2);?> //call the php divide function
  var phpResult = '<?php echo promptRequest(1); ?>';
  var results = phpResult.split();
  



  console.log(phpadd +" = phpadd");
  console.log("\nresult = "+ results);
  console.log("\nQuestion = "+ results[0]);
  // console.log("\nCorrect answer = "+ phpCorrect);
  // console.log("\nWrong1 = "+ phpWrong1);
  // console.log("\nWrong2 = "+ phpWrong2);
  // console.log("\nWrong3 = "+ phpWrong3);

</script>

</html>















Connor's Quiz Questions 
const questions = [
    //Question 1
        {
            question: "Round 4,725,143 to the nearest ten thousand",
            optionA: "4,725,100",
            optionB: "4,720,000",
            optionC: "4,725,000",
            optionD: "4,730,000",
            correctOption: "optionD"
        },
    //Question 2
        {
            question: "Round 9,992,552 to the nearest ten thousand",
            optionA: "1,000,0000",
            optionB: "9,990,000",
            optionC: "9,993,000",
            optionD: "9,992,600",
            correctOption: "optionB"
        },
    //Question 3
        {
            question: "Round 8,157,114 to the nearest thousand",
            optionA: "8,160,000",
            optionB: "8,157,110",
            optionC: "8,157,100",
            optionD: "8,157,000",
            correctOption: "optionD"
        },
    //Question 4
        {
            question: "Round 2,565,232 to the nearest tens digit",
            optionA: "2,565,240",
            optionB: "2,565,232",
            optionC: "2,565,230",
            optionD: "2,565,000",
            correctOption: "optionC"
        },
    //Question 5
        {
            question: "Round 8,779,125 to the nearest hundred",
            optionA: "8,779,000",
            optionB: "8,779,125",
            optionC: "8,779,130",
            optionD: "8,779,100",
            correctOption: "optionD"
        },
    //Question 6
        {
            question: "Round 387.5816 to the nearest hundredth",
            optionA: "387.58",
            optionB: "387.59",
            optionC: "387.582",
            optionD: "387.6",
            correctOption: "optionA"
        },
    //Question 7
        {
            question: "Round 625.713 to the nearest tenth",
            optionA: "626",
            optionB: "630",
            optionC: "625.7",
            optionD: "625.71",
            correctOption: "optionC"
        },
    //Question 8
        {
            question: "Round 740,411 to the nearest tens digit",
            optionA: "740,410",
            optionB: "740,400",
            optionC: "740,000",
            optionD: "740,411",
            correctOption: "optionA"
        },
    //Question 9
        {
            question: "Round 142.8444 to the nearest tenth",
            optionA: "140",
            optionB: "142.9",
            optionC: "143",
            optionD: "142.8",
            correctOption: "optionD"
        },
    //Question 10
        {
            question: "Round 9,071,411 to the nearest million",
            optionA: "1,000,0000",
            optionB: "9,100,000",
            optionC: "9,070,000",
            optionD: "9,000,000",
            correctOption: "optionD"
        }
    
    ]




















fillQuestions() from Game.php:
function fillQuestions(){ 
    
    var questions = [
        //Question 1
            {
                question: "",
                optionA: "",
                optionB: "",
                optionC: "",
                optionD: "",
                correctOption: ""
            },
        //Question 2
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 3
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 4
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 5
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 6
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 7
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 8
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 9
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 10
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        }
    ];  
    for (let i = 0; i < 10; i++) {

        var phpPrompt = '<?php echo promptRequest();?>'; 
        var prompt = JSON.parse(phpPrompt);
        console.log(prompt);
        questions[i].question = prompt[1];

        var j = Math.floor(Math.random()*4)+1;

        if(j == 1){
            questions[i].optionA = prompt[2];
            questions[i].optionB = prompt[3];
            questions[i].optionC = prompt[4];
            questions[i].optionD = prompt[5];
            questions[i].correctOption ="optionA";
        }
        if(j == 2){
            questions[i].optionA = prompt[5];
            questions[i].optionB = prompt[2];
            questions[i].optionC = prompt[3];
            questions[i].optionD = prompt[4];
            questions[i].correctOption = "optionB";
        } 
        if(j == 3){
            questions[i].optionA = prompt[4];
            questions[i].optionB = prompt[5];
            questions[i].optionC = prompt[2];
            questions[i].optionD = prompt[3];
            questions[i].correctOption = "optionC";
        }
        if(j == 4){
            questions[i].optionA = prompt[3];
            questions[i].optionB = prompt[4];
            questions[i].optionC = prompt[5];
            questions[i].optionD = prompt[2];
            questions[i].correctOption = "optionD";
        }
    }
    return questions;
}





from the middle of for loop in constructor of class Questions (line ~157 in Game.php)
            // var phpPrompt = '<?php echo promptRequest();?>';  //will this work?  big happy if so
            // var prompt = JSON.parse(phpPrompt);
            // console.log(prompt);
            // questions[i].question = prompt[1];




TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 
TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST TEST 


<?php
function connect() {
    $conn = mysqli_connect("localhost","fishell1","S219352","Game2");
    
    if (mysqli_connect_errno()) {
        echo "Failed to connect to MySQL: " . mysqli_connect_error();
        exit();
    }
    return $conn;
}//Connection Function   
    
    
    
    
function promptRequest(){
    
      $rowNumber = rand(1,300);
    
      
        $prompt = "";
          $conn = connect();
          $sql = "SELECT * FROM QuestionDatabase WHERE QuestionNumber = '$rowNumber'";
          if ($result = mysqli_query($conn, $sql)) {
           
              $row = mysqli_fetch_row($result);
      
        //      $prompt = $row[1];
                
              
              mysqli_free_result($result);
           
           mysqli_close($conn);
      
            return json_encode($row);
            }
}

?>

<head>
  <link rel="stylesheet" href="Game.css">
</head>

<body onload="NextQuestion(0)">
  <h1 style="background-color:black; color:white; text-align:center; font-family:courier new; font-size:300%; line-height: 100px">
    Learning Game 2
  </h1>
    <main>
        <!-- creating a modal for when quiz ends -->
        <div class="modal-container" id="score-modal">

            <div class="modal-content-container">

                <h1>Congratulations, Quiz Completed.</h1>

                <div class="grade-details">
                    <p>Attempts : 10</p>
                    <p>Wrong Answers : <span id="wrong-answers"></span></p>
                    <p>Right Answers : <span id="right-answers"></span></p>
                    <p>Grade : <span id="grade-percentage"></span>%</p>
                    <p ><span id="remarks"></span></p>
                </div>

                <div class="modal-button-container">
                    <button onclick="closeScoreModal()">Continue</button>
                </div>

            </div>
        </div>
<!-- end of modal of quiz details-->

        <div class="game-quiz-container" style = "position:relative; top:-75px">

            <div class="game-details-container">
                <h1>Score : <span id="player-score"></span> / 10</h1>
                <h1> Question : <span id="question-number"></span> / 10</h1>
            </div>

            <div class="game-question-container">
                <h1 id="display-question"></h1>
            </div>

            <div class="game-options-container">

               <div class="modal-container" id="option-modal">

                    <div class="modal-content-container">
                         <h1>Please Pick An Option</h1>

                         <div class="modal-button-container">
                            <button onclick="closeOptionModal()">Continue</button>
                        </div>

                    </div>

               </div>

                <span>
                    <input type="radio" id="option-one" name="option" class="radio" value="optionA" />
                    <label for="option-one" class="option" id="option-one-label"></label>
                </span>


                <span>
                    <input type="radio" id="option-two" name="option" class="radio" value="optionB" />
                    <label for="option-two" class="option" id="option-two-label"></label>
                </span>


                <span>
                    <input type="radio" id="option-three" name="option" class="radio" value="optionC" />
                    <label for="option-three" class="option" id="option-three-label"></label>
                </span>


                <span>
                    <input type="radio" id="option-four" name="option" class="radio" value="optionD" />
                    <label for="option-four" class="option" id="option-four-label"></label>
                </span>

            </div>

            <div class="next-button-container">
                <button onclick="handleNextQuestion()">Submit</button>
            </div>

        </div>
    </main>
    <script>






function fillQuestions(){ 
    const questions = [
        //Question 1
            {
                question: "",
                optionA: "",
                optionB: "",
                optionC: "",
                optionD: "",
                correctOption: ""
            },
        //Question 2
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 3
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 4
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 5
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 6
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 7
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 8
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 9
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        },
        //Question 10
        {
            question: "",
            optionA: "",
            optionB: "",
            optionC: "",
            optionD: "",
            correctOption: ""
        }
];   
  for (let i = 0; i < 10; i++) {

    var phpPrompt = '<?php echo promptRequest();?>'; //This is not working :(((( Big sad
    var prompt = JSON.parse(phpPrompt);
    console.log(prompt);
    questions[i].question = prompt[1];

    var j = Math.floor(Math.random()*4)+1;

    if(j == 1){
        questions[i].optionA = prompt[2];
        questions[i].optionB = prompt[3];
        questions[i].optionC = prompt[4];
        questions[i].optionD = prompt[5];
        questions[i].correctOption ="optionA";
    }
    if(j == 2){
        questions[i].optionA = prompt[5];
        questions[i].optionB = prompt[2];
        questions[i].optionC = prompt[3];
        questions[i].optionD = prompt[4];
        questions[i].correctOption = "optionB";
    } 
    if(j == 3){
        questions[i].optionA = prompt[4];
        questions[i].optionB = prompt[5];
        questions[i].optionC = prompt[2];
        questions[i].optionD = prompt[3];
        questions[i].correctOption = "optionC";
    }
    if(j == 4){
        questions[i].optionA = prompt[3];
        questions[i].optionB = prompt[4];
        questions[i].optionC = prompt[5];
        questions[i].optionD = prompt[2];
        questions[i].correctOption = "optionD";
    }
}
    return questions;
}

    
let shuffledQuestions = []; //empty array to hold shuffled selected questions out of all available questions
    
function handleQuestions() {
    questions = fillQuestions();
        //function to shuffle and push 10 questions to shuffledQuestions array
    //app would be dealing with 10questions per session
        while (shuffledQuestions.length <= 9) {
            const random = questions[Math.floor(Math.random() * questions.length)]
            if (!shuffledQuestions.includes(random)) {
                shuffledQuestions.push(random)
            }
        }
}
    
    
    let questionNumber = 1 //holds the current question number
    let playerScore = 0  //holds the player score
    let wrongAttempt = 0 //amount of wrong answers picked by player
    let indexNumber = 0 //will be used in displaying next question
    
    // function for displaying next question in the array to dom
    //also handles displaying players and quiz information to dom
    function NextQuestion(index) {
        handleQuestions()
        const currentQuestion = shuffledQuestions[index]
        document.getElementById("question-number").innerHTML = questionNumber
        document.getElementById("player-score").innerHTML = playerScore
        document.getElementById("display-question").innerHTML = currentQuestion.question;
        document.getElementById("option-one-label").innerHTML = currentQuestion.optionA;
        document.getElementById("option-two-label").innerHTML = currentQuestion.optionB;
        document.getElementById("option-three-label").innerHTML = currentQuestion.optionC;
        document.getElementById("option-four-label").innerHTML = currentQuestion.optionD;
    
    }
    
    
    function checkForAnswer() {
        const currentQuestion = shuffledQuestions[indexNumber] //gets current Question
        const currentQuestionAnswer = currentQuestion.correctOption //gets current Question's answer
        const options = document.getElementsByName("option"); //gets all elements in dom with name of 'option' (in this the radio inputs)
        let correctOption = null
    
        options.forEach((option) => {
            if (option.value === currentQuestionAnswer) {
                //get's correct's radio input with correct answer
                correctOption = option.labels[0].id
            }
        })
    
        //checking to make sure a radio input has been checked or an option being chosen
        if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked == false) {
            document.getElementById('option-modal').style.display = "flex"
        }
    
        //checking if checked radio button is same as answer
        options.forEach((option) => {
            if (option.checked === true && option.value === currentQuestionAnswer) {
                document.getElementById(correctOption).style.backgroundColor = "green"
                playerScore++ //adding to player's score
                indexNumber++ //adding 1 to index so has to display next question..
                //set to delay question number till when next question loads
                setTimeout(() => {
                    questionNumber++
                }, 1000)
            }
    
            else if (option.checked && option.value !== currentQuestionAnswer) {
                const wrongLabelId = option.labels[0].id
                document.getElementById(wrongLabelId).style.backgroundColor = "red"
                document.getElementById(correctOption).style.backgroundColor = "green"
                wrongAttempt++ //adds 1 to wrong attempts
                indexNumber++
                //set to delay question number till when next question loads
                setTimeout(() => {
                    questionNumber++
                }, 1000)
            }
        })
    }
    
    
    
    //called when the next button is called
    function handleNextQuestion() {
        checkForAnswer() //check if player picked right or wrong option
        unCheckRadioButtons()
        //delays next question displaying for a second just for some effects so questions don't rush in on player
        setTimeout(() => {
            if (indexNumber <= 9) {
    //displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10
                NextQuestion(indexNumber)
            }
            else {
                handleEndGame()//ends game if index number greater than 9 meaning we're already at the 10th question
            }
            resetOptionBackground()
        }, 1000);
    }
    
    //sets options background back to null after display the right/wrong colors
    function resetOptionBackground() {
        const options = document.getElementsByName("option");
        options.forEach((option) => {
            document.getElementById(option.labels[0].id).style.backgroundColor = ""
        })
    }
    
    // unchecking all radio buttons for next question(can be done with map or foreach loop also)
    function unCheckRadioButtons() {
        const options = document.getElementsByName("option");
        for (let i = 0; i < options.length; i++) {
            options[i].checked = false;
        }
    }
    
    // function for when all questions being answered
    function handleEndGame() {
        let remark = null
        let remarkColor = null
    
        // condition check for player remark and remark color
        if (playerScore <= 3) {
            remark = "You can do better!"
            remarkColor = "red"
        }
        else if (playerScore >= 4 && playerScore < 7) {
            remark = "Keep practicing!"
            remarkColor = "orange"
        }
        else if (playerScore >= 7) {
            remark = "Excellent! Keep up the good work."
            remarkColor = "green"
        }
        const playerGrade = (playerScore / 10) * 100
    
        //data to display to score board
        document.getElementById('remarks').innerHTML = remark
        document.getElementById('remarks').style.color = remarkColor
        document.getElementById('grade-percentage').innerHTML = playerGrade
        document.getElementById('wrong-answers').innerHTML = wrongAttempt
        document.getElementById('right-answers').innerHTML = playerScore
        document.getElementById('score-modal').style.display = "flex"
    
    }
    
    //closes score modal, resets game and reshuffles questions
    function closeScoreModal() {
        questionNumber = 1
        playerScore = 0
        wrongAttempt = 0
        indexNumber = 0
        shuffledQuestions = []
        NextQuestion(indexNumber)
        document.getElementById('score-modal').style.display = "none"
    }
    
    //function to close warning modal
    function closeOptionModal() {
        document.getElementById('option-modal').style.display = "none"
    }
    
    
    </script>
</body>









LOGIN PAGE BEFORE MASON'S SHIT
LOGIN PAGE BEFORE MASON'S SHIT
LOGIN PAGE BEFORE MASON'S SHIT
LOGIN PAGE BEFORE MASON'S SHIT





<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset = "UTF-8">
    <title> Validated Login Form</title>
    <link rel="stylesheet" href="LoginStyle.css">
</head>

<body>
  <div class ="container" style = "position:relative;top:-10px;">
    <h1 style="text-align:center; color:white; font-family:'Courier New', monospace; font-size:350%; position:relative; top:-10px;">
      Welcome Back!
    </h1>
    <h4 style="text-align:center; color:white; font-family:'Courier New', monospace; font-size:150%; position:relative; top:-10px;">
      To stay connected with us, please sign in.
    </h4>
    <form class="login_form" autocomplete="off" action = "" method="post" name="form" onsubmit= "validated(); return false;">
        <div class ="font" style="font-family:'Courier New', monospace; font-size:125%;">Username</div>
        <input type="text" name = "email">
        <div id = "email_error">Incorrect</div>
        <div class ="font font2" style="font-family:'Courier New', monospace; font-size:125%;">Password</div>
        <input type="password" name = "password">
        <div id = "pass_error">Incorrect</div>
        <button type = "submit" style="font-family:'Courier New', monospace;">Sign In</button>
    </form>
  </div>
</body>

<script src="validate.js"></script>

</html>






GAME.PHP Before masons SHIT



<?php
function connect() {
    $conn = mysqli_connect("localhost","fishell1","S219352","Game2");
    
    if (mysqli_connect_errno()) {
        echo "Failed to connect to MySQL: " . mysqli_connect_error();
        exit();
    }
    return $conn;
}//Connection Function   
    
    
    
    
function promptRequest(){
    
      $rowNumber = rand(1,300);
    
      
        $prompt = "";
          $conn = connect();
          $sql = "SELECT * FROM QuestionDatabase WHERE QuestionNumber = '$rowNumber'";
          if ($result = mysqli_query($conn, $sql)) {
           
              $row = mysqli_fetch_row($result);
      
        //      $prompt = $row[1];
                
              
              mysqli_free_result($result);
           
           mysqli_close($conn);
      
            return json_encode($row);
            }
    }

?>

<head>
  <link rel="stylesheet" href="Game.css">
</head>

<body onload="NextQuestion(0)">
  <h1 style="background-color:black; color:white; text-align:center; font-family:courier new; font-size:300%; line-height: 100px">
    Learning Game 2
  </h1>
    <main>
        <!-- creating a modal for when quiz ends -->
        <div class="modal-container" id="score-modal">

            <div class="modal-content-container">

                <h1>Congratulations, Quiz Completed.</h1>

                <div class="grade-details">
                    <p>Attempts : 10</p>
                    <p>Wrong Answers : <span id="wrong-answers"></span></p>
                    <p>Right Answers : <span id="right-answers"></span></p>
                    <p>Grade : <span id="grade-percentage"></span>%</p>
                    <p ><span id="remarks"></span></p>
                </div>

                <div class="modal-button-container">
                    <button onclick="closeScoreModal()">Continue</button>
                </div>

            </div>
        </div>
<!-- end of modal of quiz details-->

        <div class="game-quiz-container" style = "position:relative; top:-75px">

            <div class="game-details-container">
                <h1>Score : <span id="player-score"></span> / 10</h1>
                <h1> Question : <span id="question-number"></span> / 10</h1>
            </div>

            <div class="game-question-container">
                <h1 id="display-question"></h1>
            </div>

            <div class="game-options-container">

               <div class="modal-container" id="option-modal">

                    <div class="modal-content-container">
                         <h1>Please Pick An Option</h1>

                         <div class="modal-button-container">
                            <button onclick="closeOptionModal()">Continue</button>
                        </div>

                    </div>

               </div>

                <span>
                    <input type="radio" id="option-one" name="option" class="radio" value="optionA" />
                    <label for="option-one" class="option" id="option-one-label"></label>
                </span>


                <span>
                    <input type="radio" id="option-two" name="option" class="radio" value="optionB" />
                    <label for="option-two" class="option" id="option-two-label"></label>
                </span>


                <span>
                    <input type="radio" id="option-three" name="option" class="radio" value="optionC" />
                    <label for="option-three" class="option" id="option-three-label"></label>
                </span>


                <span>
                    <input type="radio" id="option-four" name="option" class="radio" value="optionD" />
                    <label for="option-four" class="option" id="option-four-label"></label>
                </span>

            </div>

            <div class="next-button-container">
                <button onclick="handleNextQuestion()">Submit</button>
            </div>

        </div>
    </main>
    <script>


class Question {
    qPrompt, qAns, qResponse1, qResponse2, qResponse3, qResponse4;
    constructor ()
    {
        //how to parse JSON into these things...?  maybe call a new function for each?  (bring those back in code?)
        var phpQuestion = '<?php echo promptRequest();?>';
        var question = JSON.parse(phpQuestion);
        this.qPrompt = phpQuestion[1];
        this.qAns = phpQuestion[2];
        this.qResponse1 = phpQuestion[2]
        this.qResponse2 = phpQuestion[3];
        this.qResponse3 = phpQuestion[4];
        this.qResponse4 = phpQuestion[5];
        console.log("${qPrompt} is qPrompt");
    }
}


//all this is not in any function:
let questionsTestArr = [100];
let q1 = new Question();
console.log(q1.qPrompt+ "= q1.qPrompt");


//class Questions {
    //this.questions = [100];
    function fillQuestions () {
        for (int i = 0; i < 100; i++) /* change the end condition to i < 100 if this works, then later when restructuring game, 
                                    set an if statement to change the array iterator to 20, 40, etc whatever level they move to * 20 */
        {
            
            questionsTestArr[i] = new Question();

        }
        return questionsTestArr;
    }
//}

    
//let shuffledQuestions = []; //empty array to hold shuffled selected questions out of all available questions
    
// //all this is not used at the moment (i believe?  doesn't seem to be called anywhere?   will comment out just in case)
// function handleQuestions() {
//     questions = fillQuestions();
//         //function to shuffle and push 10 questions to shuffledQuestions array
//     //app would be dealing with 10questions per session
//         while (shuffledQuestions.length <= 9) {
//             const random = questions[Math.floor(Math.random() * questions.length)]
//             if (!shuffledQuestions.includes(random)) {
//                 shuffledQuestions.push(random)
//             }
//         }
// }
    
    
    let questionNumber = 1 //holds the current question number
    let playerScore = 0  //holds the player score
    let wrongAttempt = 0 //amount of wrong answers picked by player

    const shuffledQuestions = fillQuestions();
    let indexNumber = 0 //will be used in displaying next question
    
    // function for displaying next question in the array to dom
    //also handles displaying players and quiz information to dom
    function NextQuestion(index) {
        //handleQuestions()

        const currentQuestion = shuffledQuestions[index]
        document.getElementById("question-number").innerHTML = questionNumber
        document.getElementById("player-score").innerHTML = playerScore
        document.getElementById("display-question").innerHTML = currentQuestion.question;
        document.getElementById("option-one-label").innerHTML = currentQuestion.optionA;
        document.getElementById("option-two-label").innerHTML = currentQuestion.optionB;
        document.getElementById("option-three-label").innerHTML = currentQuestion.optionC;
        document.getElementById("option-four-label").innerHTML = currentQuestion.optionD;
    
    }
    
    
    function checkForAnswer() {
        const currentQuestion = shuffledQuestions[indexNumber] //gets current Question
        const currentQuestionAnswer = currentQuestion.correctOption //gets current Question's answer
        const options = document.getElementsByName("option"); //gets all elements in dom with name of 'option' (in this the radio inputs)
        let correctOption = null
    
        options.forEach((option) => {
            if (option.value === currentQuestionAnswer) {
                //get's correct's radio input with correct answer
                correctOption = option.labels[0].id
            }
        })
    
        //checking to make sure a radio input has been checked or an option being chosen
        if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked == false) {
            document.getElementById('option-modal').style.display = "flex"
        }
    
        //checking if checked radio button is same as answer
        options.forEach((option) => {
            if (option.checked === true && option.value === currentQuestionAnswer) {
                document.getElementById(correctOption).style.backgroundColor = "green"
                playerScore++ //adding to player's score
                indexNumber++ //adding 1 to index so has to display next question..
                //set to delay question number till when next question loads
                setTimeout(() => {
                    questionNumber++
                }, 1000)
            }
    
            else if (option.checked && option.value !== currentQuestionAnswer) {
                const wrongLabelId = option.labels[0].id
                document.getElementById(wrongLabelId).style.backgroundColor = "red"
                document.getElementById(correctOption).style.backgroundColor = "green"
                wrongAttempt++ //adds 1 to wrong attempts
                indexNumber++
                //set to delay question number till when next question loads
                setTimeout(() => {
                    questionNumber++
                }, 1000)
            }
        })
    }
    
    
    
    //called when the next button is called
    function handleNextQuestion() {
        checkForAnswer() //check if player picked right or wrong option
        unCheckRadioButtons()
        //delays next question displaying for a second just for some effects so questions don't rush in on player
        setTimeout(() => {
            if (indexNumber <= 9) {
    //displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10
                NextQuestion(indexNumber)
            }
            else {
                handleEndGame()//ends game if index number greater than 9 meaning we're already at the 10th question
            }
            resetOptionBackground()
        }, 1000);
    }
    
    //sets options background back to null after display the right/wrong colors
    function resetOptionBackground() {
        const options = document.getElementsByName("option");
        options.forEach((option) => {
            document.getElementById(option.labels[0].id).style.backgroundColor = ""
        })
    }
    
    // unchecking all radio buttons for next question(can be done with map or foreach loop also)
    function unCheckRadioButtons() {
        const options = document.getElementsByName("option");
        for (let i = 0; i < options.length; i++) {
            options[i].checked = false;
        }
    }
    
    // function for when all questions being answered
    function handleEndGame() {
        let remark = null
        let remarkColor = null
    
        // condition check for player remark and remark color
        if (playerScore <= 3) {
            remark = "You can do better!"
            remarkColor = "red"
        }
        else if (playerScore >= 4 && playerScore < 7) {
            remark = "Keep practicing!"
            remarkColor = "orange"
        }
        else if (playerScore >= 7) {
            remark = "Excellent! Keep up the good work."
            remarkColor = "green"
        }
        const playerGrade = (playerScore / 10) * 100
    
        //data to display to score board
        document.getElementById('remarks').innerHTML = remark
        document.getElementById('remarks').style.color = remarkColor
        document.getElementById('grade-percentage').innerHTML = playerGrade
        document.getElementById('wrong-answers').innerHTML = wrongAttempt
        document.getElementById('right-answers').innerHTML = playerScore
        document.getElementById('score-modal').style.display = "flex"
    
    }
    
    //closes score modal, resets game and reshuffles questions
    function closeScoreModal() {
        questionNumber = 1
        playerScore = 0
        wrongAttempt = 0
        indexNumber = 0
        shuffledQuestions = []
        NextQuestion(indexNumber)
        document.getElementById('score-modal').style.display = "none"
    }
    
    //function to close warning modal
    function closeOptionModal() {
        document.getElementById('option-modal').style.display = "none"
    }
    
    </script>
</body>









session_start();

function addScore($s){
    $_SESSION['score'] = $_SESSION['score'] + $s;
}



